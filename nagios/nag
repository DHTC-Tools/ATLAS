#!/usr/bin/python
#
# Nagios admin script, to set a host or list of hosts into downtime
#
# Requires: run on grid2, or ssh access to grid2
#
# $Id: nag,v 1.3 2010/06/14 19:10:02 sarah Exp $

# Nagios interface
# If its not running on grid2, we ssh there and then run again.

import getopt, os, sys, time, re

nagios_hostname = "www"
nagios_pipe_path = "/var/nagios/rw/nagios.cmd"

def usage():
    print "Usage: nag [operation] [machine]"
    print "  Operations"
    print "    --on,   -u"
    print "    --off,  -d"
    print "    --downtime N, -t N,  in days"
    print "    --message \"message text\", -m \"message text\""
    print "    --help, -h"
    print
    print "Example: nag --off uct2-155, nag --downtime 2 --message 'bad disk' uct2-c154"

def main(arglist):
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hu:d:t:m:", ["help", "off", "on", "downtime=", "message="])
    except getopt.GetoptError, e:
        print str(e)
        usage()
        sys.exit(-1)

    operation = None
    duration = 2 * 24 * 60 * 60
    message = "downtime set by nag script"
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-u", "--on"):
            operation = "on"
        elif o in ("-d", "--off"):
            operation = "off"
	elif o in ("-t", "--downtime"):
            operation = "downtime"
            try:
               a = float(a)
            except ValueError, e:
               print "Bad value for downtime. Should be length of the downtime, in days"
               sys.exit(-1)
	    duration = a * 24 * 60 * 60
	elif o in ("-m", "--message"):
	    message = a
        else:
            assert False, "Unhandled option"

    machine_list = []
    for arg in args:
#        ## (Overly?) fancy expansion of [] in hostnames
#        # Pull out bracketed expression
#        brkt=$(sed 's/.*\[\(.*\)\].*/\1/' <<< $arg)
#        # If there is a hyphen, it is a range of numbers
#        if grep -q -- - <<< $brkt; then
#            num1=$(sed 's/-.*//' <<< $brkt)
#            num2=$(sed 's/.*-//' <<< $brkt)
#        else # otherwise it is 1-N
#            num1=1
#            num2=$brkt
#        fi
#         # Format everything to the width of "num2"
#        fmt=$(sed 's/\[.*\]/%0'${#num2}'g/' <<< $arg)
#        for x in $(seq -f $fmt $num1 $num2); do
#            hosts=(${hosts[*]} $x)
#        done
        match = re.search("\[(\d+)(-\d+)?\]", arg)
        if match is not None:
           start=1
           end=1
           pre=arg[:match.start()]
           post=arg[match.end():]
           width=1
           if match.group(2) is None:
              end=int(match.group(1))
	      f_width=len(match.group(1))
           else:
              start=int(match.group(1))
              end=int(match.group(2)[1:])
              f_width=len(match.group(2))-1
           if start > end:
              print "Bad host definition: %s" % arg
              usage()
              sys.exit(-1)
           for i in range(start, end+1):
              machine_list.append( "%s%s%s" %  ( pre, str(i).zfill(f_width), post) )
        else: 
           machine_list.append(arg)
    if not machine_list or operation is None:
        usage()
        sys.exit(-1)


    try:
        nagios_pipe = open(nagios_pipe_path, "w")
    except IOError, e:
        print str(e)
        print "You must be root to run nag!"
        sys.exit(-1)
    if operation == "downtime":
        starttime=int(time.time())
        endtime=starttime + duration
        msg_templates = ["[%s] %s;%s;%s;%s;%s;%s;%s;%s;%s" % (int(time.time()), "SCHEDULE_HOST_DOWNTIME", "%s", starttime,endtime,1,0, duration, "nag_script", message) ]
 

    elif operation == "on":
        prefix = "ENABLE"
        obsess_prefix = "START"
        msg_templates = [ "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_NOTIFICATIONS", "%s"),
                          "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_FLAP_DETECTION", "%s"),
                          "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_EVENT_HANDLER", "%s"),
                          "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_CHECK", "%s"),
		          "[%s] %s_%s;%s" % (int(time.time()) , obsess_prefix, "OBSESSING_OVER_HOST", "%s") ]
    elif operation == "off":
        prefix = "DISABLE"
        obsess_prefix = "STOP"
        msg_templates = [ "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_NOTIFICATIONS", "%s"),
                          "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_FLAP_DETECTION", "%s"),
                          "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_EVENT_HANDLER", "%s"),
                          "[%s] %s_%s;%s" % (int(time.time()) , prefix, "HOST_CHECK", "%s"),
                          "[%s] %s_%s;%s" % (int(time.time()) , obsess_prefix, "OBSESSING_OVER_HOST", "%s") ]
    else:
        usage()
        sys.exit(3)
    starttime=int(time.time())
    endtime=starttime + duration
    print "Commands sent:"
    for machine in machine_list:
        for template in msg_templates:
           print >> nagios_pipe, template % machine
           print template % machine

if __name__ == "__main__":
    if os.uname()[1].startswith(nagios_hostname):
	main(sys.argv[1:])
    else:
	print "ssh %s python /usr/local/bin/nag %s" % \
                 (nagios_hostname, " ".join(sys.argv[1:]))
